-- Step 1: Create the Book Table
CREATE TABLE Book (
    acc_no INT PRIMARY KEY,
    username VARCHAR(50),
    bookno INT,
    days INT,
    created_on DATE
);

-- Step 2: Insert Sample Data
INSERT INTO Book (acc_no, username, bookno, days, created_on) VALUES
(1001, 'John', 501, 3, '2023-07-16'),
(1002, 'Jacob', 502, 5, '2023-07-10'),
(1003, 'Jill', 503, 10, '2023-08-17'),
(1004, 'James', 504, 0, '2023-06-20'),
(1005, 'Alice', 505, 7, '2023-05-14');

-- Step 3: PL/pgSQL Function to Calculate Fine
CREATE OR REPLACE FUNCTION calculate_fine(p_acc_no INT)
RETURNS INT AS $$
DECLARE
    fine INT;
    overdue_days INT;
BEGIN
    SELECT days INTO overdue_days FROM Book WHERE acc_no = p_acc_no;

    IF NOT FOUND THEN
        RAISE NOTICE 'Account number not found';
        RETURN NULL;
    END IF;

    fine := overdue_days * 5;
    RAISE NOTICE 'Fine for Account % is Rs.%', p_acc_no, fine;
    RETURN fine;
END;
$$ LANGUAGE plpgsql;

-- Step 4: Query - Count of Books by Users Whose Name Starts with 'J'
SELECT username, COUNT(*) AS total_books
FROM Book
WHERE username ILIKE 'J%'
GROUP BY username;

-- Step 5: Query - Users Whose Accounts Created After 15th of Any Month
SELECT username, acc_no
FROM Book
WHERE EXTRACT(DAY FROM created_on) > 15;

-- Step 6: PL/pgSQL Block - Greatest of Three Numbers
DO $$
DECLARE
    a INT := 45;
    b INT := 28;
    c INT := 59;
    greatest INT;
BEGIN
    greatest := GREATEST(a, b, c);
    RAISE NOTICE 'Greatest number is: %', greatest;
END $$;
