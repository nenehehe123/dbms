-- Step 1: Create assessment table
CREATE TABLE assessment (
    reg_no INT PRIMARY KEY,
    name VARCHAR(100),
    mark1 INT,
    mark2 INT,
    mark3 INT,
    total INT,
    dept VARCHAR(50)
);

-- Step 2: Create dept_details table
CREATE TABLE dept_details (
    dept_no INT PRIMARY KEY,
    dept_name VARCHAR(100),
    location VARCHAR(100)
);

-- Step 3: Function to print grade
CREATE OR REPLACE FUNCTION PrintGrade(mark INT)
RETURNS TEXT
LANGUAGE plpgsql
AS $$
BEGIN
    IF mark BETWEEN 91 AND 100 THEN
        RETURN 'Grade A';
    ELSIF mark BETWEEN 81 AND 90 THEN
        RETURN 'Grade B';
    ELSIF mark BETWEEN 71 AND 80 THEN
        RETURN 'Grade C';
    ELSIF mark BETWEEN 60 AND 70 THEN
        RETURN 'Grade D';
    ELSE
        RETURN 'Grade E';
    END IF;
END;
$$;

-- Example:
-- SELECT PrintGrade(85); -- Returns 'Grade B'

-- Step 4: Trigger function to prevent NULL insertions
CREATE OR REPLACE FUNCTION validate_assessment_data()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
    IF NEW.name IS NULL OR NEW.mark1 IS NULL OR NEW.mark2 IS NULL OR NEW.mark3 IS NULL THEN
        RAISE EXCEPTION 'Null values are not allowed in name or marks.';
    END IF;
    RETURN NEW;
END;
$$;

CREATE TRIGGER check_nulls_before_insert
BEFORE INSERT ON assessment
FOR EACH ROW
EXECUTE FUNCTION validate_assessment_data();

-- Step 5: Insert sample data
INSERT INTO assessment (reg_no, name, mark1, mark2, mark3, total, dept)
VALUES
(1, 'Arun', 85, 90, 88, 263, 'CSE'),
(2, 'Divya', 70, 75, 80, 225, 'ECE'),
(3, 'Ravi', 60, 65, 70, 195, 'CSE');

-- Step 6: Function to count students in a department
CREATE OR REPLACE FUNCTION CountStudentsInDept(dept_name VARCHAR)
RETURNS INT
LANGUAGE plpgsql
AS $$
DECLARE
    student_count INT;
BEGIN
    SELECT COUNT(*) INTO student_count
    FROM assessment
    WHERE dept = dept_name;
    
    RETURN student_count;
END;
$$;

-- Example:
-- SELECT CountStudentsInDept('CSE'); -- Returns 2
